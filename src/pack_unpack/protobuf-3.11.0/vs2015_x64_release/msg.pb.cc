// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#include "msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_msg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_T_msg_2eproto;
class MSG_TDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_T> _instance;
} _MSG_T_default_instance_;
class MSGDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG> _instance;
} _MSG_default_instance_;
static void InitDefaultsscc_info_MSG_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MSG_default_instance_;
    new (ptr) ::MSG();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MSG::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_msg_2eproto}, {
      &scc_info_MSG_T_msg_2eproto.base,}};

static void InitDefaultsscc_info_MSG_T_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MSG_T_default_instance_;
    new (ptr) ::MSG_T();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MSG_T::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_T_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_T_msg_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_msg_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_msg_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_msg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_msg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MSG_T, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MSG_T, bool_optional_),
  PROTOBUF_FIELD_OFFSET(::MSG_T, bool_required_),
  PROTOBUF_FIELD_OFFSET(::MSG_T, bool_repeated_),
  PROTOBUF_FIELD_OFFSET(::MSG_T, int_optional_),
  PROTOBUF_FIELD_OFFSET(::MSG_T, int_required_),
  PROTOBUF_FIELD_OFFSET(::MSG_T, int_repeated_),
  PROTOBUF_FIELD_OFFSET(::MSG_T, int64_optional_),
  PROTOBUF_FIELD_OFFSET(::MSG_T, int64_required_),
  PROTOBUF_FIELD_OFFSET(::MSG_T, int64_repeated_),
  PROTOBUF_FIELD_OFFSET(::MSG_T, string_optional_),
  PROTOBUF_FIELD_OFFSET(::MSG_T, string_required_),
  PROTOBUF_FIELD_OFFSET(::MSG_T, string_repeated_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MSG, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MSG, bool_optional_),
  PROTOBUF_FIELD_OFFSET(::MSG, bool_required_),
  PROTOBUF_FIELD_OFFSET(::MSG, bool_repeated_),
  PROTOBUF_FIELD_OFFSET(::MSG, int_optional_),
  PROTOBUF_FIELD_OFFSET(::MSG, int_required_),
  PROTOBUF_FIELD_OFFSET(::MSG, int_repeated_),
  PROTOBUF_FIELD_OFFSET(::MSG, int64_optional_),
  PROTOBUF_FIELD_OFFSET(::MSG, int64_required_),
  PROTOBUF_FIELD_OFFSET(::MSG, int64_repeated_),
  PROTOBUF_FIELD_OFFSET(::MSG, string_optional_),
  PROTOBUF_FIELD_OFFSET(::MSG, string_required_),
  PROTOBUF_FIELD_OFFSET(::MSG, string_repeated_),
  PROTOBUF_FIELD_OFFSET(::MSG, t_optional_),
  PROTOBUF_FIELD_OFFSET(::MSG, t_required_),
  PROTOBUF_FIELD_OFFSET(::MSG, t_repeated_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::MSG_T)},
  { 17, -1, sizeof(::MSG)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MSG_T_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MSG_default_instance_),
};

const char descriptor_table_protodef_msg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tmsg.proto\"\223\005\n\003MSG\022\025\n\rbool_optional\030\001 \001"
  "(\010\022\025\n\rbool_required\030\002 \001(\010\022\025\n\rbool_repeat"
  "ed\030\003 \003(\010\022\024\n\014int_optional\030\004 \001(\005\022\024\n\014int_re"
  "quired\030\005 \001(\005\022\024\n\014int_repeated\030\006 \003(\005\022\026\n\016in"
  "t64_optional\030\007 \001(\003\022\026\n\016int64_required\030\010 \001"
  "(\003\022\026\n\016int64_repeated\030\t \003(\003\022\027\n\017string_opt"
  "ional\030\n \001(\t\022\027\n\017string_required\030\013 \001(\t\022\027\n\017"
  "string_repeated\030\014 \003(\t\022\032\n\nT_optional\030\r \001("
  "\0132\006.MSG.T\022\032\n\nT_required\030\016 \001(\0132\006.MSG.T\022\032\n"
  "\nT_repeated\030\017 \003(\0132\006.MSG.T\032\235\002\n\001T\022\025\n\rbool_"
  "optional\030\001 \001(\010\022\025\n\rbool_required\030\002 \001(\010\022\025\n"
  "\rbool_repeated\030\003 \003(\010\022\024\n\014int_optional\030\004 \001"
  "(\005\022\024\n\014int_required\030\005 \001(\005\022\024\n\014int_repeated"
  "\030\006 \003(\005\022\026\n\016int64_optional\030\007 \001(\003\022\026\n\016int64_"
  "required\030\010 \001(\003\022\026\n\016int64_repeated\030\t \003(\003\022\027"
  "\n\017string_optional\030\n \001(\t\022\027\n\017string_requir"
  "ed\030\013 \001(\t\022\027\n\017string_repeated\030\014 \003(\tb\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_msg_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_msg_2eproto_sccs[2] = {
  &scc_info_MSG_msg_2eproto.base,
  &scc_info_MSG_T_msg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_msg_2eproto_once;
static bool descriptor_table_msg_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2eproto = {
  &descriptor_table_msg_2eproto_initialized, descriptor_table_protodef_msg_2eproto, "msg.proto", 681,
  &descriptor_table_msg_2eproto_once, descriptor_table_msg_2eproto_sccs, descriptor_table_msg_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_msg_2eproto::offsets,
  file_level_metadata_msg_2eproto, 2, file_level_enum_descriptors_msg_2eproto, file_level_service_descriptors_msg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_msg_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_msg_2eproto), true);

// ===================================================================

void MSG_T::InitAsDefaultInstance() {
}
class MSG_T::_Internal {
 public:
};

MSG_T::MSG_T()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MSG.T)
}
MSG_T::MSG_T(const MSG_T& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      bool_repeated_(from.bool_repeated_),
      int_repeated_(from.int_repeated_),
      int64_repeated_(from.int64_repeated_),
      string_repeated_(from.string_repeated_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  string_optional_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_string_optional().empty()) {
    string_optional_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.string_optional_);
  }
  string_required_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_string_required().empty()) {
    string_required_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.string_required_);
  }
  ::memcpy(&bool_optional_, &from.bool_optional_,
    static_cast<size_t>(reinterpret_cast<char*>(&int_required_) -
    reinterpret_cast<char*>(&bool_optional_)) + sizeof(int_required_));
  // @@protoc_insertion_point(copy_constructor:MSG.T)
}

void MSG_T::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_T_msg_2eproto.base);
  string_optional_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  string_required_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&bool_optional_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&int_required_) -
      reinterpret_cast<char*>(&bool_optional_)) + sizeof(int_required_));
}

MSG_T::~MSG_T() {
  // @@protoc_insertion_point(destructor:MSG.T)
  SharedDtor();
}

void MSG_T::SharedDtor() {
  string_optional_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  string_required_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_T::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_T& MSG_T::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_T_msg_2eproto.base);
  return *internal_default_instance();
}


void MSG_T::Clear() {
// @@protoc_insertion_point(message_clear_start:MSG.T)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bool_repeated_.Clear();
  int_repeated_.Clear();
  int64_repeated_.Clear();
  string_repeated_.Clear();
  string_optional_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  string_required_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&bool_optional_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&int_required_) -
      reinterpret_cast<char*>(&bool_optional_)) + sizeof(int_required_));
  _internal_metadata_.Clear();
}

const char* MSG_T::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool bool_optional = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bool_optional_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool bool_required = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bool_required_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool bool_repeated = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_bool_repeated(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_bool_repeated(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 int_optional = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          int_optional_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 int_required = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          int_required_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 int_repeated = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_int_repeated(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_int_repeated(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 int64_optional = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          int64_optional_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 int64_required = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          int64_required_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 int64_repeated = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_int64_repeated(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72) {
          _internal_add_int64_repeated(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string string_optional = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_string_optional();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MSG.T.string_optional"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string string_required = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_string_required();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MSG.T.string_required"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string string_repeated = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_string_repeated();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MSG.T.string_repeated"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_T::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MSG.T)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool bool_optional = 1;
  if (this->bool_optional() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bool_optional(), target);
  }

  // bool bool_required = 2;
  if (this->bool_required() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_bool_required(), target);
  }

  // repeated bool bool_repeated = 3;
  if (this->_internal_bool_repeated_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_bool_repeated(), target);
  }

  // int32 int_optional = 4;
  if (this->int_optional() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_int_optional(), target);
  }

  // int32 int_required = 5;
  if (this->int_required() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_int_required(), target);
  }

  // repeated int32 int_repeated = 6;
  {
    int byte_size = _int_repeated_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_int_repeated(), byte_size, target);
    }
  }

  // int64 int64_optional = 7;
  if (this->int64_optional() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_int64_optional(), target);
  }

  // int64 int64_required = 8;
  if (this->int64_required() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_int64_required(), target);
  }

  // repeated int64 int64_repeated = 9;
  {
    int byte_size = _int64_repeated_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          9, _internal_int64_repeated(), byte_size, target);
    }
  }

  // string string_optional = 10;
  if (this->string_optional().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string_optional().data(), static_cast<int>(this->_internal_string_optional().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MSG.T.string_optional");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_string_optional(), target);
  }

  // string string_required = 11;
  if (this->string_required().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string_required().data(), static_cast<int>(this->_internal_string_required().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MSG.T.string_required");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_string_required(), target);
  }

  // repeated string string_repeated = 12;
  for (int i = 0, n = this->_internal_string_repeated_size(); i < n; i++) {
    const auto& s = this->_internal_string_repeated(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MSG.T.string_repeated");
    target = stream->WriteString(12, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MSG.T)
  return target;
}

size_t MSG_T::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MSG.T)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool bool_repeated = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_bool_repeated_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bool_repeated_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 int_repeated = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->int_repeated_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _int_repeated_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 int64_repeated = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->int64_repeated_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _int64_repeated_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string string_repeated = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(string_repeated_.size());
  for (int i = 0, n = string_repeated_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      string_repeated_.Get(i));
  }

  // string string_optional = 10;
  if (this->string_optional().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_string_optional());
  }

  // string string_required = 11;
  if (this->string_required().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_string_required());
  }

  // bool bool_optional = 1;
  if (this->bool_optional() != 0) {
    total_size += 1 + 1;
  }

  // bool bool_required = 2;
  if (this->bool_required() != 0) {
    total_size += 1 + 1;
  }

  // int32 int_optional = 4;
  if (this->int_optional() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_int_optional());
  }

  // int64 int64_optional = 7;
  if (this->int64_optional() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_int64_optional());
  }

  // int64 int64_required = 8;
  if (this->int64_required() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_int64_required());
  }

  // int32 int_required = 5;
  if (this->int_required() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_int_required());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_T::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MSG.T)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_T* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_T>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MSG.T)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MSG.T)
    MergeFrom(*source);
  }
}

void MSG_T::MergeFrom(const MSG_T& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MSG.T)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bool_repeated_.MergeFrom(from.bool_repeated_);
  int_repeated_.MergeFrom(from.int_repeated_);
  int64_repeated_.MergeFrom(from.int64_repeated_);
  string_repeated_.MergeFrom(from.string_repeated_);
  if (from.string_optional().size() > 0) {

    string_optional_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.string_optional_);
  }
  if (from.string_required().size() > 0) {

    string_required_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.string_required_);
  }
  if (from.bool_optional() != 0) {
    _internal_set_bool_optional(from._internal_bool_optional());
  }
  if (from.bool_required() != 0) {
    _internal_set_bool_required(from._internal_bool_required());
  }
  if (from.int_optional() != 0) {
    _internal_set_int_optional(from._internal_int_optional());
  }
  if (from.int64_optional() != 0) {
    _internal_set_int64_optional(from._internal_int64_optional());
  }
  if (from.int64_required() != 0) {
    _internal_set_int64_required(from._internal_int64_required());
  }
  if (from.int_required() != 0) {
    _internal_set_int_required(from._internal_int_required());
  }
}

void MSG_T::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MSG.T)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_T::CopyFrom(const MSG_T& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MSG.T)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_T::IsInitialized() const {
  return true;
}

void MSG_T::InternalSwap(MSG_T* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  bool_repeated_.InternalSwap(&other->bool_repeated_);
  int_repeated_.InternalSwap(&other->int_repeated_);
  int64_repeated_.InternalSwap(&other->int64_repeated_);
  string_repeated_.InternalSwap(&other->string_repeated_);
  string_optional_.Swap(&other->string_optional_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  string_required_.Swap(&other->string_required_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(bool_optional_, other->bool_optional_);
  swap(bool_required_, other->bool_required_);
  swap(int_optional_, other->int_optional_);
  swap(int64_optional_, other->int64_optional_);
  swap(int64_required_, other->int64_required_);
  swap(int_required_, other->int_required_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_T::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG::InitAsDefaultInstance() {
  ::_MSG_default_instance_._instance.get_mutable()->t_optional_ = const_cast< ::MSG_T*>(
      ::MSG_T::internal_default_instance());
  ::_MSG_default_instance_._instance.get_mutable()->t_required_ = const_cast< ::MSG_T*>(
      ::MSG_T::internal_default_instance());
}
class MSG::_Internal {
 public:
  static const ::MSG_T& t_optional(const MSG* msg);
  static const ::MSG_T& t_required(const MSG* msg);
};

const ::MSG_T&
MSG::_Internal::t_optional(const MSG* msg) {
  return *msg->t_optional_;
}
const ::MSG_T&
MSG::_Internal::t_required(const MSG* msg) {
  return *msg->t_required_;
}
MSG::MSG()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MSG)
}
MSG::MSG(const MSG& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      bool_repeated_(from.bool_repeated_),
      int_repeated_(from.int_repeated_),
      int64_repeated_(from.int64_repeated_),
      string_repeated_(from.string_repeated_),
      t_repeated_(from.t_repeated_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  string_optional_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_string_optional().empty()) {
    string_optional_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.string_optional_);
  }
  string_required_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_string_required().empty()) {
    string_required_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.string_required_);
  }
  if (from._internal_has_t_optional()) {
    t_optional_ = new ::MSG_T(*from.t_optional_);
  } else {
    t_optional_ = nullptr;
  }
  if (from._internal_has_t_required()) {
    t_required_ = new ::MSG_T(*from.t_required_);
  } else {
    t_required_ = nullptr;
  }
  ::memcpy(&bool_optional_, &from.bool_optional_,
    static_cast<size_t>(reinterpret_cast<char*>(&int_required_) -
    reinterpret_cast<char*>(&bool_optional_)) + sizeof(int_required_));
  // @@protoc_insertion_point(copy_constructor:MSG)
}

void MSG::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_msg_2eproto.base);
  string_optional_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  string_required_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&t_optional_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&int_required_) -
      reinterpret_cast<char*>(&t_optional_)) + sizeof(int_required_));
}

MSG::~MSG() {
  // @@protoc_insertion_point(destructor:MSG)
  SharedDtor();
}

void MSG::SharedDtor() {
  string_optional_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  string_required_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete t_optional_;
  if (this != internal_default_instance()) delete t_required_;
}

void MSG::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG& MSG::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_msg_2eproto.base);
  return *internal_default_instance();
}


void MSG::Clear() {
// @@protoc_insertion_point(message_clear_start:MSG)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bool_repeated_.Clear();
  int_repeated_.Clear();
  int64_repeated_.Clear();
  string_repeated_.Clear();
  t_repeated_.Clear();
  string_optional_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  string_required_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && t_optional_ != nullptr) {
    delete t_optional_;
  }
  t_optional_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && t_required_ != nullptr) {
    delete t_required_;
  }
  t_required_ = nullptr;
  ::memset(&bool_optional_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&int_required_) -
      reinterpret_cast<char*>(&bool_optional_)) + sizeof(int_required_));
  _internal_metadata_.Clear();
}

const char* MSG::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool bool_optional = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bool_optional_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool bool_required = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bool_required_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool bool_repeated = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_bool_repeated(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_bool_repeated(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 int_optional = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          int_optional_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 int_required = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          int_required_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 int_repeated = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_int_repeated(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_int_repeated(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 int64_optional = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          int64_optional_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 int64_required = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          int64_required_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 int64_repeated = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_int64_repeated(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72) {
          _internal_add_int64_repeated(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string string_optional = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_string_optional();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MSG.string_optional"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string string_required = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_string_required();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MSG.string_required"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string string_repeated = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_string_repeated();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MSG.string_repeated"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // .MSG.T T_optional = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_t_optional(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MSG.T T_required = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_t_required(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .MSG.T T_repeated = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_t_repeated(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MSG)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool bool_optional = 1;
  if (this->bool_optional() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bool_optional(), target);
  }

  // bool bool_required = 2;
  if (this->bool_required() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_bool_required(), target);
  }

  // repeated bool bool_repeated = 3;
  if (this->_internal_bool_repeated_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_bool_repeated(), target);
  }

  // int32 int_optional = 4;
  if (this->int_optional() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_int_optional(), target);
  }

  // int32 int_required = 5;
  if (this->int_required() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_int_required(), target);
  }

  // repeated int32 int_repeated = 6;
  {
    int byte_size = _int_repeated_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_int_repeated(), byte_size, target);
    }
  }

  // int64 int64_optional = 7;
  if (this->int64_optional() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_int64_optional(), target);
  }

  // int64 int64_required = 8;
  if (this->int64_required() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_int64_required(), target);
  }

  // repeated int64 int64_repeated = 9;
  {
    int byte_size = _int64_repeated_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          9, _internal_int64_repeated(), byte_size, target);
    }
  }

  // string string_optional = 10;
  if (this->string_optional().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string_optional().data(), static_cast<int>(this->_internal_string_optional().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MSG.string_optional");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_string_optional(), target);
  }

  // string string_required = 11;
  if (this->string_required().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string_required().data(), static_cast<int>(this->_internal_string_required().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MSG.string_required");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_string_required(), target);
  }

  // repeated string string_repeated = 12;
  for (int i = 0, n = this->_internal_string_repeated_size(); i < n; i++) {
    const auto& s = this->_internal_string_repeated(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MSG.string_repeated");
    target = stream->WriteString(12, s, target);
  }

  // .MSG.T T_optional = 13;
  if (this->has_t_optional()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::t_optional(this), target, stream);
  }

  // .MSG.T T_required = 14;
  if (this->has_t_required()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::t_required(this), target, stream);
  }

  // repeated .MSG.T T_repeated = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_t_repeated_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_t_repeated(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MSG)
  return target;
}

size_t MSG::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MSG)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool bool_repeated = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_bool_repeated_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bool_repeated_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 int_repeated = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->int_repeated_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _int_repeated_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 int64_repeated = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->int64_repeated_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _int64_repeated_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string string_repeated = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(string_repeated_.size());
  for (int i = 0, n = string_repeated_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      string_repeated_.Get(i));
  }

  // repeated .MSG.T T_repeated = 15;
  total_size += 1UL * this->_internal_t_repeated_size();
  for (const auto& msg : this->t_repeated_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string string_optional = 10;
  if (this->string_optional().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_string_optional());
  }

  // string string_required = 11;
  if (this->string_required().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_string_required());
  }

  // .MSG.T T_optional = 13;
  if (this->has_t_optional()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *t_optional_);
  }

  // .MSG.T T_required = 14;
  if (this->has_t_required()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *t_required_);
  }

  // bool bool_optional = 1;
  if (this->bool_optional() != 0) {
    total_size += 1 + 1;
  }

  // bool bool_required = 2;
  if (this->bool_required() != 0) {
    total_size += 1 + 1;
  }

  // int32 int_optional = 4;
  if (this->int_optional() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_int_optional());
  }

  // int64 int64_optional = 7;
  if (this->int64_optional() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_int64_optional());
  }

  // int64 int64_required = 8;
  if (this->int64_required() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_int64_required());
  }

  // int32 int_required = 5;
  if (this->int_required() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_int_required());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MSG)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MSG)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MSG)
    MergeFrom(*source);
  }
}

void MSG::MergeFrom(const MSG& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MSG)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bool_repeated_.MergeFrom(from.bool_repeated_);
  int_repeated_.MergeFrom(from.int_repeated_);
  int64_repeated_.MergeFrom(from.int64_repeated_);
  string_repeated_.MergeFrom(from.string_repeated_);
  t_repeated_.MergeFrom(from.t_repeated_);
  if (from.string_optional().size() > 0) {

    string_optional_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.string_optional_);
  }
  if (from.string_required().size() > 0) {

    string_required_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.string_required_);
  }
  if (from.has_t_optional()) {
    _internal_mutable_t_optional()->::MSG_T::MergeFrom(from._internal_t_optional());
  }
  if (from.has_t_required()) {
    _internal_mutable_t_required()->::MSG_T::MergeFrom(from._internal_t_required());
  }
  if (from.bool_optional() != 0) {
    _internal_set_bool_optional(from._internal_bool_optional());
  }
  if (from.bool_required() != 0) {
    _internal_set_bool_required(from._internal_bool_required());
  }
  if (from.int_optional() != 0) {
    _internal_set_int_optional(from._internal_int_optional());
  }
  if (from.int64_optional() != 0) {
    _internal_set_int64_optional(from._internal_int64_optional());
  }
  if (from.int64_required() != 0) {
    _internal_set_int64_required(from._internal_int64_required());
  }
  if (from.int_required() != 0) {
    _internal_set_int_required(from._internal_int_required());
  }
}

void MSG::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MSG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG::CopyFrom(const MSG& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MSG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG::IsInitialized() const {
  return true;
}

void MSG::InternalSwap(MSG* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  bool_repeated_.InternalSwap(&other->bool_repeated_);
  int_repeated_.InternalSwap(&other->int_repeated_);
  int64_repeated_.InternalSwap(&other->int64_repeated_);
  string_repeated_.InternalSwap(&other->string_repeated_);
  t_repeated_.InternalSwap(&other->t_repeated_);
  string_optional_.Swap(&other->string_optional_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  string_required_.Swap(&other->string_required_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(t_optional_, other->t_optional_);
  swap(t_required_, other->t_required_);
  swap(bool_optional_, other->bool_optional_);
  swap(bool_required_, other->bool_required_);
  swap(int_optional_, other->int_optional_);
  swap(int64_optional_, other->int64_optional_);
  swap(int64_required_, other->int64_required_);
  swap(int_required_, other->int_required_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::MSG_T* Arena::CreateMaybeMessage< ::MSG_T >(Arena* arena) {
  return Arena::CreateInternal< ::MSG_T >(arena);
}
template<> PROTOBUF_NOINLINE ::MSG* Arena::CreateMaybeMessage< ::MSG >(Arena* arena) {
  return Arena::CreateInternal< ::MSG >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
